                                                 - - - Q U E S T I O N S - - -
- Is dereferencing conversion?
  * The way things are working right now, it is for numbers
  * Does that mean that we should do the same for structs/unions/enums and just do away with derefAndConvert()?
- Properly understand the WASM memory model (!!!)
  * Memory layout may not always be straight-forward
  * buffer2js probably doesn't work right
  * Current memory access patterns are wrong https://developer.mozilla.org/en-US/docs/WebAssembly/Using_the_JavaScript_API





                                                 - - - C L E A N U P - - -
- Rethink/review
  * Does the current array -> JS actually work right for structs and unions?
  * How can we approach union value constructors without the danger of overwriting ourselves
    - e.g. typedef union { int x; char y; } z;
      => create_z({x: 5})
      => create_z({x: 5, y: 0})
      => z.x = 5; z.y = 0; // y overwrites x
- Minor changes
  * Clean up JSON format
    - Inconsistent b/w params[] and params{}, why not just name each one uniquely based on context?
  * Different types of pointers
    - Raw pointer/string pointer/buffer pointer
    - Allows you to override the representation for char *
    - { type: arrayPointer, params: [ { type: int }, { size: 3 || 'my-size-var' } ] }
  * Make sure constructors/destructors don't shadow C exports
  * Rethink `char *` ==> should we just simplify this by doing pointer by default, str.deref() to get the string?
      => might be even more confusing since .deref() should really only return one element



                                                 - - - C O M P L E T E - - -
- Rewrite c2js/js2c
  * We want **NAMED** functions
  * Why? No other way to deal with recursion
  * Simple solution:
    - Don't change anything major
    - c2js caches results in the env.jsBuffer
    - c2js returns the function name, rather than the function body
  * Do we still need to detect recursion?
    - I think so (but maybe not)
    - Easy way:
       * Keep a stack of visited types
       * If current type in stack, recursion found
- Don't always substitute in C types
  * For this we'll need to know `struct x` vs `typedef struct x` (just ask the user?)
- Generate import/export lists for compilers
- Better getter/setter names (getter_type_field/setter_type_field)
- Decide whether to use ES6 module syntax in output & add `export`s
- Generate constructors/destructors for structs (what about unions?)
- Finish js2c (struct/union values, arrays)
